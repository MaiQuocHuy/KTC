import { useState } from "react";
import { useForm } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";
import { useNavigate } from "react-router";
import { useTaskMutations } from "../hooks";
import type { Task, TaskFormData, TaskStatus, TaskPriority } from "../types";

// Yup validation schema
const validationSchema: yup.ObjectSchema<TaskFormData> = yup.object({
  title: yup
    .string()
    .required("Title is required")
    .min(3, "Title must be at least 3 characters")
    .max(100, "Title must be less than 100 characters"),
  start_date: yup
    .string()
    .required("Start date is required")
    .matches(/^\d{4}-\d{2}-\d{2}$/, "Please enter a valid date"),
  due_date: yup
    .string()
    .optional()
    .matches(/^\d{4}-\d{2}-\d{2}$/, "Please enter a valid date")
    .test(
      "due_date-after-start_date",
      "Due date must be after start date",
      function (value) {
        if (!value) return true;
        const { start_date } = this.parent;
        return new Date(value) >= new Date(start_date);
      }
    ),
  description: yup
    .string()
    .optional()
    .max(500, "Description must be less than 500 characters"),
  status: yup
    .mixed<TaskStatus>()
    .required("Status is required")
    .oneOf(["to_do", "in_progress", "done"], "Please select a valid status"),
  priority: yup
    .mixed<TaskPriority>()
    .required("Priority is required")
    .oneOf(["low", "medium", "high"], "Please select a valid priority"),
  assignee_id: yup
    .string()
    .optional()
    .min(1, "Assignee ID cannot be empty if provided"),
});

export default function CreateTask() {
  console.log("TestCreateRouting");
  const navigate = useNavigate();
  const { createTaskMutation, isCreating, error, clearError } =
    useTaskMutations();
  const [notification, setNotification] = useState<{
    type: "success" | "error";
    message: string;
  } | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors, isValid, dirtyFields },
    reset,
    // setError,
  } = useForm<TaskFormData>({
    resolver: yupResolver(validationSchema),
    mode: "onChange",
    defaultValues: {
      title: "",
      start_date: new Date().toISOString().split("T")[0],
      due_date: "",
      description: "",
      status: "to_do" as TaskStatus,
      priority: "medium" as TaskPriority,
      assignee_id: "",
    },
  });

  const onSubmit = async (data: TaskFormData): Promise<void> => {
    try {
      clearError();
      setNotification(null);

      // Convert form data to Task object
      const taskData: Task = {
        id: undefined, // ID will be generated by the server
        title: data.title,
        start_date: new Date(data.start_date),
        due_date: data.due_date ? new Date(data.due_date) : undefined,
        description: data.description || undefined,
        status: data.status,
        priority: data.priority,
        assignee_id: data.assignee_id
          ? parseInt(data.assignee_id.toString())
          : undefined,
        completed_date: data.status === "done" ? new Date() : undefined,
        created_time: new Date(),
        updated_time: new Date(),
      };

      // Call API to create task
      await createTaskMutation(taskData);

      // Show success message
      setNotification({
        type: "success",
        message: "Task created successfully!",
      });

      // Reset form
      reset();

      // Navigate after a brief delay to show the success message
      setTimeout(() => {
        navigate("/tasks");
      }, 1500);
    } catch (error) {
      console.error("Error creating task:", error);
      setNotification({
        type: "error",
        message: "Failed to create task. Please try again.",
      });
    }
  };

  const handleReset = () => {
    reset();
    clearError();
    setNotification(null);
  };

  const isFormSubmitting = isCreating;

  return (
    <div className="max-w-screen mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold text-gray-800 mb-6">Create New Task</h2>

      {/* Notification */}
      {notification && (
        <div
          className={`mb-6 p-4 rounded-md ${
            notification.type === "success"
              ? "bg-green-100 border border-green-400 text-green-700"
              : "bg-red-100 border border-red-400 text-red-700"
          }`}
        >
          {notification.message}
        </div>
      )}

      {/* API Error */}
      {error && (
        <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-md">
          {error}
        </div>
      )}

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Title Field */}
        <div>
          <label
            htmlFor="title"
            className="block text-sm font-bold text-gray-700 mb-2"
          >
            Title <span className="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="title"
            {...register("title")}
            disabled={isFormSubmitting}
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors ${
              errors.title
                ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                : !errors.title && dirtyFields.title
                ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
            }`}
            placeholder="Enter task title"
          />
          {errors.title && (
            <p className="text-red-500 text-sm mt-1">{errors.title.message}</p>
          )}
        </div>

        {/* Start Date and Due Date Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Start Date */}
          <div>
            <label
              htmlFor="start_date"
              className="block text-sm font-bold text-gray-700 mb-2"
            >
              Start Date <span className="text-red-500">*</span>
            </label>
            <input
              type="date"
              id="start_date"
              {...register("start_date")}
              disabled={isFormSubmitting}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors ${
                errors.start_date
                  ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                  : !errors.start_date && dirtyFields.start_date
                  ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                  : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
              }`}
            />
            {errors.start_date && (
              <p className="text-red-500 text-sm mt-1">
                {errors.start_date.message}
              </p>
            )}
          </div>

          {/* Due Date */}
          <div>
            <label
              htmlFor="due_date"
              className="block text-sm font-bold text-gray-700 mb-2"
            >
              Due Date
            </label>
            <input
              type="date"
              id="due_date"
              {...register("due_date")}
              disabled={isFormSubmitting}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors ${
                errors.due_date
                  ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                  : !errors.due_date && dirtyFields.due_date
                  ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                  : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
              }`}
            />
            {errors.due_date && (
              <p className="text-red-500 text-sm mt-1">
                {errors.due_date.message}
              </p>
            )}
          </div>
        </div>

        {/* Status and Priority Row */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* Status */}
          <div>
            <label
              htmlFor="status"
              className="block text-sm font-bold text-gray-700 mb-2"
            >
              Status <span className="text-red-500">*</span>
            </label>
            <select
              id="status"
              {...register("status")}
              disabled={isFormSubmitting}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors ${
                errors.status
                  ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                  : !errors.status && dirtyFields.status
                  ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                  : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
              }`}
            >
              <option value="to_do">To Do</option>
              <option value="in_progress">In Progress</option>
              <option value="done">Done</option>
            </select>
            {errors.status && (
              <p className="text-red-500 text-sm mt-1">
                {errors.status.message}
              </p>
            )}
          </div>

          {/* Priority */}
          <div>
            <label
              htmlFor="priority"
              className="block text-sm font-bold text-gray-700 mb-2"
            >
              Priority <span className="text-red-500">*</span>
            </label>
            <select
              id="priority"
              {...register("priority")}
              disabled={isFormSubmitting}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors ${
                errors.priority
                  ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                  : !errors.priority && dirtyFields.priority
                  ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                  : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
              }`}
            >
              <option value="low">Low</option>
              <option value="medium">Medium</option>
              <option value="high">High</option>
            </select>
            {errors.priority && (
              <p className="text-red-500 text-sm mt-1">
                {errors.priority.message}
              </p>
            )}
          </div>
        </div>

        {/* Description Field */}
        <div>
          <label
            htmlFor="description"
            className="block text-sm font-bold text-gray-700 mb-2"
          >
            Description
          </label>
          <textarea
            id="description"
            rows={4}
            {...register("description")}
            disabled={isFormSubmitting}
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors resize-none ${
              errors.description
                ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                : !errors.description && dirtyFields.description
                ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
            }`}
            placeholder="Enter task description (optional)"
          />
          {errors.description && (
            <p className="text-red-500 text-sm mt-1">
              {errors.description.message}
            </p>
          )}
        </div>

        {/* Assignee ID Field */}
        <div>
          <label
            htmlFor="assignee_id"
            className="block text-sm font-bold text-gray-700 mb-2"
          >
            Assignee ID
          </label>
          <input
            type="text"
            id="assignee_id"
            {...register("assignee_id")}
            disabled={isFormSubmitting}
            className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 transition-colors ${
              errors.assignee_id
                ? "border-red-500 focus:border-red-500 focus:ring-red-200"
                : !errors.assignee_id && dirtyFields.assignee_id
                ? "border-green-500 focus:border-green-500 focus:ring-green-200"
                : "border-gray-300 focus:border-blue-500 focus:ring-blue-200"
            }`}
            placeholder="Enter assignee ID (optional)"
          />
          {errors.assignee_id && (
            <p className="text-red-500 text-sm mt-1">
              {errors.assignee_id.message}
            </p>
          )}
        </div>

        {/* Submit Button */}
        <div className="flex justify-end space-x-4">
          <button
            type="button"
            onClick={handleReset}
            disabled={isFormSubmitting}
            className="px-6 py-2 border border-gray-300 rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            Reset
          </button>
          <button
            type="submit"
            disabled={isFormSubmitting || !isValid}
            className={`px-6 py-2 rounded-md font-medium transition-colors ${
              isFormSubmitting || !isValid
                ? "bg-gray-400 cursor-not-allowed text-white"
                : "bg-blue-500 hover:bg-blue-600 text-white"
            }`}
          >
            {isFormSubmitting ? "Creating..." : "Create Task"}
          </button>
        </div>

        {/* Form Status */}
        <div className="text-center">
          <p
            className={`text-sm ${isValid ? "text-green-500" : "text-red-500"}`}
          >
            {isValid
              ? "Form is valid ✓"
              : "Please fill in all required fields correctly"}
          </p>
        </div>
      </form>
    </div>
  );
}
